name: CI Pipeline

on:
  push:
    branches: ["main"] # only run on direct pushes to main (which should not happen)
  pull_request:
    branches: ["main", "develop"]

jobs:

  ### Build & Check Formatting in Backend
  build-backend:
    runs-on: ubuntu-latest

    # Set up postgres
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test-user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      # for npm
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          npm ci

      - name: Run Linter
        working-directory: ./backend
        run: npm run lint

      - name: Run Prettier Formatting Check
        working-directory: ./backend
        run: npm run format
          
        # @TODO need to change JWT_SECRET to be private
      - name: Set up PostgreSQL & ENV Variables
        working-directory: ./backend
        run: |
          echo "DB_DIALECT=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USER=test-user" >> $GITHUB_ENV
          echo "DB_PASS=password" >> $GITHUB_ENV
          echo "DB_NAME=testdb" >> $GITHUB_ENV
          echo "JWT_SECRET=1234abc" >> $GITHUB_ENV
          echo "DEFAULT_USERNAME=admin" >> $GITHUB_ENV
          echo "DEFAULT_PASSWORD=admin" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "TEST_USERNAME=tester" >> $GITHUB_ENV
          echo "TEST_PASSWORD=tester" >> $GITHUB_ENV

      - name: Build & Check if Backend Runs
        working-directory: ./backend
        run: |
          npm start & 
          SERVER_PID=$!
          sleep 5
          kill $SERVER_PID
      
  ### Build & Check formatting in frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
              node-version: "18"
        
        - name: Install Frontend Dependencies
          working-directory: ./frontend
          run: |
            npm ci
        
        - name: Run Linter
          working-directory: ./frontend
          run: npm run lint

        - name: Run Prettier Formatting Check
          working-directory: ./frontend
          run: npm run format

        - name: Build Frontend
          working-directory: ./frontend
          env:
            VITE_API_URL: "http://127.0.0.1:3000"
            VITE_TEST_USERNAME: "tester"
            VITE_TEST_PASSWORD: "tester"
          run: npm run build

  ### Run all services to do smoke, unit, integration, coverage, and e2e tests
  ### Also upload all test documents as artifacts
  tests:
    runs-on: ubuntu-latest
    env:
      VITE_API_URL: "http://127.0.0.1:3000"
      VITE_TEST_USERNAME: "tester"
      VITE_TEST_PASSWORD: "tester"
    needs: [build-backend, build-frontend]
    # Set up postgres
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test-user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
            node-version: "18"

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
      
        # @TODO need to change JWT_SECRET to be private
      - name: Set up PostgreSQL $ ENV Variables
        working-directory: ./backend
        run: |
          echo "DB_DIALECT=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USER=test-user" >> $GITHUB_ENV
          echo "DB_PASS=password" >> $GITHUB_ENV
          echo "DB_NAME=testdb" >> $GITHUB_ENV
          echo "JWT_SECRET=1234abc" >> $GITHUB_ENV
          echo "DEFAULT_USERNAME=admin" >> $GITHUB_ENV
          echo "DEFAULT_PASSWORD=admin" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "TEST_USERNAME=tester" >> $GITHUB_ENV
          echo "TEST_PASSWORD=tester" >> $GITHUB_ENV
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build & Start Backend
        working-directory: ./backend
        run: npm start & # runs in background

      - name: Build & Start Frontend
        working-directory: ./frontend
        run: npm run build && npm run dev & # runs in background
      
      - name: Install Testing Dependencies
        working-directory: ./testing
        run: |
          npm ci
      
      - name: Install Playwright Browsers
        working-directory: ./testing
        run: npx playwright install chromium # only uses chromium for tests (CURRENTLY)

      - name: Backend/Database Connection Health Check
        run: |
          echo "Waiting for backend to be ready..."
          until $(curl --verbose --output /dev/null --silent --head --fail http://localhost:3000/health); do
              printf '.'
              sleep 5
          done
          echo "Backend is up and running!"

        
        # Run Smoke Tests First
      - name: Run smoke tests
        working-directory: ./testing/smoke-test
        run: npx playwright test
        
        ### Run all backend tests
      - name: Run Backend Unit Tests
        working-directory: ./backend
        run: npm run build && npm run unit-test
      
      - name: Run Backend Integration Tests
        working-directory: ./backend
        run: npm run integ-test -- --test-timeout=10000
      
      - name: Run Backend Coverage Test
        working-directory: ./backend
        run: npm run coverage -- --test-timeout=10000
          
        ### Run all frontend tests
      - name: Run Frontend Unit Tests
        working-directory: ./frontend
        run: npm run unit-test
      
      - name: Run Frontend Integration Tests
        working-directory: ./frontend
        run: npm run integ-test -- --test-timeout=10000

      - name: Run Frontend Coverage Test
        working-directory: ./frontend
        run: npm run coverage -- --test-timeout=10000
        
        ### Run all E2E Tests
        
        ### Upload Testing Reports as Artifacts
      - name: Upload Backend Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: backend-test-reports
          path: backend/test-report/
        
      - name: Upload Frontend Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: frontend-test-reports
          path: frontend/test-report/
      
      - name: Cleanup
        if: always()
        run: kill $(jobs -p) || true

  combine-artifacts:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend-test-reports
          path: deployment/frontend

      - name: Download Backend Artifact
        uses: actions/download-artifact@v2
        with:
          name: backend-test-reports
          path: deployment/backend
      
      - name: Upload Combined Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: combined-artifacts
          path: deployment/
  
  deploy-tests:
    # currently running on pull requests going into develop
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    needs: [combine-artifacts]
    
    permissions:
      pages: write
      id-token: write

    environment:
      # environment created automatically by GitHub
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download Combined Artifacts
        uses: actions/download-artifact@v2
        with:
          name: combined-artifacts
          path: deployment/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

          
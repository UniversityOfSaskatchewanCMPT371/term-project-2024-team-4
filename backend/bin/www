#!/usr/bin/env node

const initializeDefaultCatalogue = require("../config/initialize");
const dataSource = require("../config/db");

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port, "0.0.0.0");
// server.on("error", onError);
// server.on("listening", onListening);
// First, initialize the database connection
dataSource
	.initialize()
	.then(() => {
		console.log("Connected to DB successfully!");

		// After successful database connection, initialize the default catalogue
		initializeDefaultCatalogue()
			.then(() => {
				console.log("Default catalogue initialization successful.");

				// Once the catalogue is initialized, then start listening on the provided port
				server.listen(port, "0.0.0.0");
				server.on("error", onError);
				server.on("listening", onListening);
			})
			.catch((error) => {
				console.error("Failed to initialize default catalogue:", error);
				process.exit(1); // Exit if cannot initialize the catalogue
			});
	})
	.catch((error) => {
		console.error("Database connection failed:", error);
		process.exit(1); // Exit if cannot connect to the database
	});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}
